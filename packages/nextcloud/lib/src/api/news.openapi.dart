// Use of this source code is governed by a agpl license. It can be obtained at `https://spdx.org/licenses/AGPL-3.0.html`.

// OpenAPI client generated by Dynamite. Do not manually edit this file.

// ignore_for_file: camel_case_extensions, camel_case_types, discarded_futures
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names, public_member_api_docs
// ignore_for_file: unreachable_switch_case

/// news Version: 21.2.0.
///
/// An RSS/Atom feed reader.
///
/// Use of this source code is governed by a agpl license.
/// It can be obtained at `https://spdx.org/licenses/AGPL-3.0.html`.
@_i2.experimental
library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/json_object.dart';
import 'package:built_value/serializer.dart';
import 'package:built_value/standard_json_plugin.dart' as _i5;
import 'package:collection/collection.dart';
import 'package:dynamite_runtime/built_value.dart' as _i4;
import 'package:dynamite_runtime/http_client.dart' as _i1;
import 'package:meta/meta.dart' as _i2;
import 'package:uri/uri.dart' as _i3;

part 'news.openapi.g.dart';

class $Client extends _i1.DynamiteClient {
  /// Creates a new `DynamiteClient` for untagged requests.
  $Client(
    super.baseURL, {
    super.baseHeaders,
    super.httpClient,
    super.cookieJar,
    super.authentications,
  });

  /// Creates a new [$Client] from another [client].
  $Client.fromClient(_i1.DynamiteClient client)
      : super(
          client.baseURL,
          baseHeaders: client.baseHeaders,
          httpClient: client.httpClient,
          cookieJar: client.cookieJar,
          authentications: client.authentications,
        );

  /// Builds a serializer to parse the response of `$getSupportedApiVersions_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<SupportedAPIVersions, void> $getSupportedApiVersions_Serializer() => _i1.DynamiteSerializer(
        bodyType: const FullType(SupportedAPIVersions),
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [getSupportedApiVersionsRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<SupportedAPIVersions, void>> getSupportedApiVersions() async {
    final _rawResponse = await getSupportedApiVersionsRaw();

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [getSupportedApiVersions] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<SupportedAPIVersions, void>> getSupportedApiVersionsRaw() async {
    final _headers = <String, String>{'Accept': 'application/json'};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    const _path = '/index.php/apps/news/api';
    final _response = await executeRequest(
      'get',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $getSupportedApiVersions_Serializer();
    return _i1.ResponseConverter<SupportedAPIVersions, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$listFolders_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<ListFolders, void> $listFolders_Serializer() => _i1.DynamiteSerializer(
        bodyType: const FullType(ListFolders),
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listFoldersRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<ListFolders, void>> listFolders() async {
    final _rawResponse = await listFoldersRaw();

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listFolders] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<ListFolders, void>> listFoldersRaw() async {
    final _headers = <String, String>{'Accept': 'application/json'};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    const _path = '/index.php/apps/news/api/v1-3/folders';
    final _response = await executeRequest(
      'get',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $listFolders_Serializer();
    return _i1.ResponseConverter<ListFolders, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$createFolder_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<ListFolders, void> $createFolder_Serializer() => _i1.DynamiteSerializer(
        bodyType: const FullType(ListFolders),
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [name]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [createFolderRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<ListFolders, void>> createFolder({required String name}) async {
    final _rawResponse = await createFolderRaw(
      name: name,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [name]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [createFolder] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<ListFolders, void>> createFolderRaw({required String name}) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{'Accept': 'application/json'};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $name = _$jsonSerializers.serialize(name, specifiedType: const FullType(String));
    _parameters['name'] = $name;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/folders{?name*}').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $createFolder_Serializer();
    return _i1.ResponseConverter<ListFolders, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$renameFolder_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $renameFolder_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [name]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [renameFolderRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> renameFolder({
    required int folderId,
    required String name,
  }) async {
    final _rawResponse = await renameFolderRaw(
      folderId: folderId,
      name: name,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [name]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [renameFolder] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> renameFolderRaw({
    required int folderId,
    required String name,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $folderId = _$jsonSerializers.serialize(folderId, specifiedType: const FullType(int));
    _parameters['folderId'] = $folderId;

    final $name = _$jsonSerializers.serialize(name, specifiedType: const FullType(String));
    _parameters['name'] = $name;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/folders/{folderId}{?name*}').expand(_parameters);
    final _response = await executeRequest(
      'put',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $renameFolder_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$deleteFolder_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $deleteFolder_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [deleteFolderRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> deleteFolder({required int folderId}) async {
    final _rawResponse = await deleteFolderRaw(
      folderId: folderId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [deleteFolder] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> deleteFolderRaw({required int folderId}) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $folderId = _$jsonSerializers.serialize(folderId, specifiedType: const FullType(int));
    _parameters['folderId'] = $folderId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/folders/{folderId}').expand(_parameters);
    final _response = await executeRequest(
      'delete',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $deleteFolder_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$markFolderAsRead_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $markFolderAsRead_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [newestItemId] The newest read item.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markFolderAsReadRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> markFolderAsRead({
    required int folderId,
    required int newestItemId,
  }) async {
    final _rawResponse = await markFolderAsReadRaw(
      folderId: folderId,
      newestItemId: newestItemId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [newestItemId] The newest read item.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markFolderAsRead] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> markFolderAsReadRaw({
    required int folderId,
    required int newestItemId,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $folderId = _$jsonSerializers.serialize(folderId, specifiedType: const FullType(int));
    _parameters['folderId'] = $folderId;

    final $newestItemId = _$jsonSerializers.serialize(newestItemId, specifiedType: const FullType(int));
    _parameters['newestItemId'] = $newestItemId;

    final _path =
        _i3.UriTemplate('/index.php/apps/news/api/v1-3/folders/{folderId}/read{?newestItemId*}').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $markFolderAsRead_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$listFeeds_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<ListFeeds, void> $listFeeds_Serializer() => _i1.DynamiteSerializer(
        bodyType: const FullType(ListFeeds),
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listFeedsRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<ListFeeds, void>> listFeeds() async {
    final _rawResponse = await listFeedsRaw();

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listFeeds] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<ListFeeds, void>> listFeedsRaw() async {
    final _headers = <String, String>{'Accept': 'application/json'};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    const _path = '/index.php/apps/news/api/v1-3/feeds';
    final _response = await executeRequest(
      'get',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $listFeeds_Serializer();
    return _i1.ResponseConverter<ListFeeds, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$addFeed_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<ListFeeds, void> $addFeed_Serializer() => _i1.DynamiteSerializer(
        bodyType: const FullType(ListFeeds),
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [url]
  ///   * [folderId]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [addFeedRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<ListFeeds, void>> addFeed({
    required String url,
    int? folderId,
  }) async {
    final _rawResponse = await addFeedRaw(
      url: url,
      folderId: folderId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [url]
  ///   * [folderId]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [addFeed] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<ListFeeds, void>> addFeedRaw({
    required String url,
    int? folderId,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{'Accept': 'application/json'};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $url = _$jsonSerializers.serialize(url, specifiedType: const FullType(String));
    _parameters['url'] = $url;

    final $folderId = _$jsonSerializers.serialize(folderId, specifiedType: const FullType(int));
    _parameters['folderId'] = $folderId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/feeds{?url*,folderId*}').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $addFeed_Serializer();
    return _i1.ResponseConverter<ListFeeds, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$deleteFeed_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $deleteFeed_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [deleteFeedRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> deleteFeed({required int feedId}) async {
    final _rawResponse = await deleteFeedRaw(
      feedId: feedId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [deleteFeed] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> deleteFeedRaw({required int feedId}) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $feedId = _$jsonSerializers.serialize(feedId, specifiedType: const FullType(int));
    _parameters['feedId'] = $feedId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/feeds/{feedId}').expand(_parameters);
    final _response = await executeRequest(
      'delete',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $deleteFeed_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$moveFeed_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $moveFeed_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [folderId]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [moveFeedRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> moveFeed({
    required int feedId,
    int? folderId,
  }) async {
    final _rawResponse = await moveFeedRaw(
      feedId: feedId,
      folderId: folderId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [folderId]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [moveFeed] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> moveFeedRaw({
    required int feedId,
    int? folderId,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $feedId = _$jsonSerializers.serialize(feedId, specifiedType: const FullType(int));
    _parameters['feedId'] = $feedId;

    final $folderId = _$jsonSerializers.serialize(folderId, specifiedType: const FullType(int));
    _parameters['folderId'] = $folderId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/feeds/{feedId}/move{?folderId*}').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $moveFeed_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$renameFeed_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $renameFeed_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [feedTitle]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [renameFeedRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> renameFeed({
    required int feedId,
    required String feedTitle,
  }) async {
    final _rawResponse = await renameFeedRaw(
      feedId: feedId,
      feedTitle: feedTitle,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [feedTitle]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [renameFeed] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> renameFeedRaw({
    required int feedId,
    required String feedTitle,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $feedId = _$jsonSerializers.serialize(feedId, specifiedType: const FullType(int));
    _parameters['feedId'] = $feedId;

    final $feedTitle = _$jsonSerializers.serialize(feedTitle, specifiedType: const FullType(String));
    _parameters['feedTitle'] = $feedTitle;

    final _path =
        _i3.UriTemplate('/index.php/apps/news/api/v1-3/feeds/{feedId}/rename{?feedTitle*}').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $renameFeed_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$markFeedAsRead_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $markFeedAsRead_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [newestItemId]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markFeedAsReadRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> markFeedAsRead({
    required int feedId,
    required int newestItemId,
  }) async {
    final _rawResponse = await markFeedAsReadRaw(
      feedId: feedId,
      newestItemId: newestItemId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [newestItemId]
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markFeedAsRead] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> markFeedAsReadRaw({
    required int feedId,
    required int newestItemId,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $feedId = _$jsonSerializers.serialize(feedId, specifiedType: const FullType(int));
    _parameters['feedId'] = $feedId;

    final $newestItemId = _$jsonSerializers.serialize(newestItemId, specifiedType: const FullType(int));
    _parameters['newestItemId'] = $newestItemId;

    final _path =
        _i3.UriTemplate('/index.php/apps/news/api/v1-3/feeds/{feedId}/read{?newestItemId*}').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $markFeedAsRead_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$listArticles_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<ListArticles, void> $listArticles_Serializer() => _i1.DynamiteSerializer(
        bodyType: const FullType(ListArticles),
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [type] Defaults to `3`.
  ///   * [id] Defaults to `0`.
  ///   * [getRead] Defaults to `1`.
  ///   * [batchSize] Defaults to `-1`.
  ///   * [offset] Defaults to `0`.
  ///   * [oldestFirst] Defaults to `0`.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listArticlesRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<ListArticles, void>> listArticles({
    int? type,
    int? id,
    int? getRead,
    int? batchSize,
    int? offset,
    int? oldestFirst,
  }) async {
    final _rawResponse = await listArticlesRaw(
      type: type,
      id: id,
      getRead: getRead,
      batchSize: batchSize,
      offset: offset,
      oldestFirst: oldestFirst,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [type] Defaults to `3`.
  ///   * [id] Defaults to `0`.
  ///   * [getRead] Defaults to `1`.
  ///   * [batchSize] Defaults to `-1`.
  ///   * [offset] Defaults to `0`.
  ///   * [oldestFirst] Defaults to `0`.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listArticles] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<ListArticles, void>> listArticlesRaw({
    int? type,
    int? id,
    int? getRead,
    int? batchSize,
    int? offset,
    int? oldestFirst,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{'Accept': 'application/json'};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    var $type = _$jsonSerializers.serialize(type, specifiedType: const FullType(int));
    $type ??= 3;
    _parameters['type'] = $type;

    var $id = _$jsonSerializers.serialize(id, specifiedType: const FullType(int));
    $id ??= 0;
    _parameters['id'] = $id;

    var $getRead = _$jsonSerializers.serialize(getRead, specifiedType: const FullType(int));
    $getRead ??= 1;
    _parameters['getRead'] = $getRead;

    var $batchSize = _$jsonSerializers.serialize(batchSize, specifiedType: const FullType(int));
    $batchSize ??= -1;
    _parameters['batchSize'] = $batchSize;

    var $offset = _$jsonSerializers.serialize(offset, specifiedType: const FullType(int));
    $offset ??= 0;
    _parameters['offset'] = $offset;

    var $oldestFirst = _$jsonSerializers.serialize(oldestFirst, specifiedType: const FullType(int));
    $oldestFirst ??= 0;
    _parameters['oldestFirst'] = $oldestFirst;

    final _path =
        _i3.UriTemplate('/index.php/apps/news/api/v1-3/items{?type*,id*,getRead*,batchSize*,offset*,oldestFirst*}')
            .expand(_parameters);
    final _response = await executeRequest(
      'get',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $listArticles_Serializer();
    return _i1.ResponseConverter<ListArticles, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$listUpdatedArticles_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<ListArticles, void> $listUpdatedArticles_Serializer() => _i1.DynamiteSerializer(
        bodyType: const FullType(ListArticles),
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [type] Defaults to `3`.
  ///   * [id] Defaults to `0`.
  ///   * [lastModified] Defaults to `0`.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listUpdatedArticlesRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<ListArticles, void>> listUpdatedArticles({
    int? type,
    int? id,
    int? lastModified,
  }) async {
    final _rawResponse = await listUpdatedArticlesRaw(
      type: type,
      id: id,
      lastModified: lastModified,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Parameters:
  ///   * [type] Defaults to `3`.
  ///   * [id] Defaults to `0`.
  ///   * [lastModified] Defaults to `0`.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [listUpdatedArticles] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<ListArticles, void>> listUpdatedArticlesRaw({
    int? type,
    int? id,
    int? lastModified,
  }) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{'Accept': 'application/json'};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    var $type = _$jsonSerializers.serialize(type, specifiedType: const FullType(int));
    $type ??= 3;
    _parameters['type'] = $type;

    var $id = _$jsonSerializers.serialize(id, specifiedType: const FullType(int));
    $id ??= 0;
    _parameters['id'] = $id;

    var $lastModified = _$jsonSerializers.serialize(lastModified, specifiedType: const FullType(int));
    $lastModified ??= 0;
    _parameters['lastModified'] = $lastModified;

    final _path =
        _i3.UriTemplate('/index.php/apps/news/api/v1-3/items/updated{?type*,id*,lastModified*}').expand(_parameters);
    final _response = await executeRequest(
      'get',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $listUpdatedArticles_Serializer();
    return _i1.ResponseConverter<ListArticles, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$markArticleAsRead_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $markArticleAsRead_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markArticleAsReadRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> markArticleAsRead({required int itemId}) async {
    final _rawResponse = await markArticleAsReadRaw(
      itemId: itemId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markArticleAsRead] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> markArticleAsReadRaw({required int itemId}) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $itemId = _$jsonSerializers.serialize(itemId, specifiedType: const FullType(int));
    _parameters['itemId'] = $itemId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/items/{itemId}/read').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $markArticleAsRead_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$markArticleAsUnread_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $markArticleAsUnread_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markArticleAsUnreadRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> markArticleAsUnread({required int itemId}) async {
    final _rawResponse = await markArticleAsUnreadRaw(
      itemId: itemId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [markArticleAsUnread] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> markArticleAsUnreadRaw({required int itemId}) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $itemId = _$jsonSerializers.serialize(itemId, specifiedType: const FullType(int));
    _parameters['itemId'] = $itemId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/items/{itemId}/unread').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $markArticleAsUnread_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$starArticle_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $starArticle_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [starArticleRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> starArticle({required int itemId}) async {
    final _rawResponse = await starArticleRaw(
      itemId: itemId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [starArticle] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> starArticleRaw({required int itemId}) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $itemId = _$jsonSerializers.serialize(itemId, specifiedType: const FullType(int));
    _parameters['itemId'] = $itemId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/items/{itemId}/star').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $starArticle_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$unstarArticle_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $unstarArticle_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [unstarArticleRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> unstarArticle({required int itemId}) async {
    final _rawResponse = await unstarArticleRaw(
      itemId: itemId,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * 200
  ///
  /// See:
  ///  * [unstarArticle] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> unstarArticleRaw({required int itemId}) async {
    final _parameters = <String, dynamic>{};
    final _headers = <String, String>{};

// coverage:ignore-start
    final authentication = authentications?.firstWhereOrNull(
      (auth) => switch (auth) {
        _i1.DynamiteHttpBasicAuthentication() => true,
        _ => false,
      },
    );

    if (authentication != null) {
      _headers.addAll(
        authentication.headers,
      );
    } else {
      throw Exception('Missing authentication for basic_auth');
    }

// coverage:ignore-end
    final $itemId = _$jsonSerializers.serialize(itemId, specifiedType: const FullType(int));
    _parameters['itemId'] = $itemId;

    final _path = _i3.UriTemplate('/index.php/apps/news/api/v1-3/items/{itemId}/unstar').expand(_parameters);
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      validStatuses: const {200},
    );

    final _serializer = $unstarArticle_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }
}

@BuiltValue(instantiable: false)
abstract interface class $SupportedAPIVersionsInterface {
  BuiltList<String>? get apiLevels;
}

abstract class SupportedAPIVersions
    implements $SupportedAPIVersionsInterface, Built<SupportedAPIVersions, SupportedAPIVersionsBuilder> {
  /// Creates a new SupportedAPIVersions object using the builder pattern.
  factory SupportedAPIVersions([void Function(SupportedAPIVersionsBuilder)? b]) = _$SupportedAPIVersions;

  // coverage:ignore-start
  const SupportedAPIVersions._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory SupportedAPIVersions.fromJson(Map<String, dynamic> json) =>
      _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for SupportedAPIVersions.
  static Serializer<SupportedAPIVersions> get serializer => _$supportedAPIVersionsSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $ArticleInterface {
  int get id;
  String get guid;
  String get guidHash;
  String? get url;
  String get title;
  String? get author;
  int get pubDate;
  int? get updatedDate;
  String get body;
  String? get enclosureMime;
  String? get enclosureLink;
  String? get mediaThumbnail;
  String? get mediaDescription;
  int get feedId;
  bool get unread;
  bool get starred;
  int get lastModified;
  bool get rtl;
  String get fingerprint;
  String get contentHash;
}

abstract class Article implements $ArticleInterface, Built<Article, ArticleBuilder> {
  /// Creates a new Article object using the builder pattern.
  factory Article([void Function(ArticleBuilder)? b]) = _$Article;

  // coverage:ignore-start
  const Article._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory Article.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for Article.
  static Serializer<Article> get serializer => _$articleSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $FeedInterface {
  int get id;
  String get url;
  String get title;
  String? get faviconLink;
  int get added;
  int? get folderId;
  int? get unreadCount;
  int get ordering;
  String? get link;
  bool get pinned;
  int get updateErrorCount;
  String? get lastUpdateError;
  BuiltList<Article> get items;
}

abstract class Feed implements $FeedInterface, Built<Feed, FeedBuilder> {
  /// Creates a new Feed object using the builder pattern.
  factory Feed([void Function(FeedBuilder)? b]) = _$Feed;

  // coverage:ignore-start
  const Feed._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory Feed.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for Feed.
  static Serializer<Feed> get serializer => _$feedSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $FolderInterface {
  int get id;
  String get name;
  bool get opened;

  /// This seems to be broken. In testing it is always empty.
  BuiltList<Feed> get feeds;
}

abstract class Folder implements $FolderInterface, Built<Folder, FolderBuilder> {
  /// Creates a new Folder object using the builder pattern.
  factory Folder([void Function(FolderBuilder)? b]) = _$Folder;

  // coverage:ignore-start
  const Folder._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory Folder.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for Folder.
  static Serializer<Folder> get serializer => _$folderSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $ListFoldersInterface {
  BuiltList<Folder> get folders;
}

abstract class ListFolders implements $ListFoldersInterface, Built<ListFolders, ListFoldersBuilder> {
  /// Creates a new ListFolders object using the builder pattern.
  factory ListFolders([void Function(ListFoldersBuilder)? b]) = _$ListFolders;

  // coverage:ignore-start
  const ListFolders._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory ListFolders.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for ListFolders.
  static Serializer<ListFolders> get serializer => _$listFoldersSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $ListFeedsInterface {
  int? get starredCount;
  int? get newestItemId;
  BuiltList<Feed> get feeds;
}

abstract class ListFeeds implements $ListFeedsInterface, Built<ListFeeds, ListFeedsBuilder> {
  /// Creates a new ListFeeds object using the builder pattern.
  factory ListFeeds([void Function(ListFeedsBuilder)? b]) = _$ListFeeds;

  // coverage:ignore-start
  const ListFeeds._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory ListFeeds.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for ListFeeds.
  static Serializer<ListFeeds> get serializer => _$listFeedsSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $ListArticlesInterface {
  BuiltList<Article> get items;
}

abstract class ListArticles implements $ListArticlesInterface, Built<ListArticles, ListArticlesBuilder> {
  /// Creates a new ListArticles object using the builder pattern.
  factory ListArticles([void Function(ListArticlesBuilder)? b]) = _$ListArticles;

  // coverage:ignore-start
  const ListArticles._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory ListArticles.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for ListArticles.
  static Serializer<ListArticles> get serializer => _$listArticlesSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $OCSMetaInterface {
  String get status;
  int get statuscode;
  String? get message;
  String? get totalitems;
  String? get itemsperpage;
}

abstract class OCSMeta implements $OCSMetaInterface, Built<OCSMeta, OCSMetaBuilder> {
  /// Creates a new OCSMeta object using the builder pattern.
  factory OCSMeta([void Function(OCSMetaBuilder)? b]) = _$OCSMeta;

  // coverage:ignore-start
  const OCSMeta._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory OCSMeta.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for OCSMeta.
  static Serializer<OCSMeta> get serializer => _$oCSMetaSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $EmptyOCS_OcsInterface {
  OCSMeta get meta;
  BuiltList<JsonObject> get data;
}

abstract class EmptyOCS_Ocs implements $EmptyOCS_OcsInterface, Built<EmptyOCS_Ocs, EmptyOCS_OcsBuilder> {
  /// Creates a new EmptyOCS_Ocs object using the builder pattern.
  factory EmptyOCS_Ocs([void Function(EmptyOCS_OcsBuilder)? b]) = _$EmptyOCS_Ocs;

  // coverage:ignore-start
  const EmptyOCS_Ocs._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory EmptyOCS_Ocs.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for EmptyOCS_Ocs.
  static Serializer<EmptyOCS_Ocs> get serializer => _$emptyOCSOcsSerializer;
}

@BuiltValue(instantiable: false)
abstract interface class $EmptyOCSInterface {
  EmptyOCS_Ocs get ocs;
}

abstract class EmptyOCS implements $EmptyOCSInterface, Built<EmptyOCS, EmptyOCSBuilder> {
  /// Creates a new EmptyOCS object using the builder pattern.
  factory EmptyOCS([void Function(EmptyOCSBuilder)? b]) = _$EmptyOCS;

  // coverage:ignore-start
  const EmptyOCS._();
  // coverage:ignore-end

  /// Creates a new object from the given [json] data.
  ///
  /// Use [toJson] to serialize it back into json.
  // coverage:ignore-start
  factory EmptyOCS.fromJson(Map<String, dynamic> json) => _$jsonSerializers.deserializeWith(serializer, json)!;
  // coverage:ignore-end

  /// Parses this object into a json like map.
  ///
  /// Use the fromJson factory to revive it again.
  // coverage:ignore-start
  Map<String, dynamic> toJson() => _$jsonSerializers.serializeWith(serializer, this)! as Map<String, dynamic>;
  // coverage:ignore-end

  /// Serializer for EmptyOCS.
  static Serializer<EmptyOCS> get serializer => _$emptyOCSSerializer;
}

// coverage:ignore-start
/// Serializer for all values in this library.
///
/// Serializes values into the `built_value` wire format.
/// See: [$jsonSerializers] for serializing into json.
@_i2.visibleForTesting
final Serializers $serializers = _$serializers;
final Serializers _$serializers = (Serializers().toBuilder()
      ..addBuilderFactory(const FullType(SupportedAPIVersions), SupportedAPIVersionsBuilder.new)
      ..add(SupportedAPIVersions.serializer)
      ..addBuilderFactory(const FullType(BuiltList, [FullType(String)]), ListBuilder<String>.new)
      ..addBuilderFactory(const FullType(ListFolders), ListFoldersBuilder.new)
      ..add(ListFolders.serializer)
      ..addBuilderFactory(const FullType(Folder), FolderBuilder.new)
      ..add(Folder.serializer)
      ..addBuilderFactory(const FullType(Feed), FeedBuilder.new)
      ..add(Feed.serializer)
      ..addBuilderFactory(const FullType(Article), ArticleBuilder.new)
      ..add(Article.serializer)
      ..addBuilderFactory(const FullType(BuiltList, [FullType(Article)]), ListBuilder<Article>.new)
      ..addBuilderFactory(const FullType(BuiltList, [FullType(Feed)]), ListBuilder<Feed>.new)
      ..addBuilderFactory(const FullType(BuiltList, [FullType(Folder)]), ListBuilder<Folder>.new)
      ..addBuilderFactory(const FullType(ListFeeds), ListFeedsBuilder.new)
      ..add(ListFeeds.serializer)
      ..addBuilderFactory(const FullType(ListArticles), ListArticlesBuilder.new)
      ..add(ListArticles.serializer)
      ..addBuilderFactory(const FullType(OCSMeta), OCSMetaBuilder.new)
      ..add(OCSMeta.serializer)
      ..addBuilderFactory(const FullType(EmptyOCS), EmptyOCSBuilder.new)
      ..add(EmptyOCS.serializer)
      ..addBuilderFactory(const FullType(EmptyOCS_Ocs), EmptyOCS_OcsBuilder.new)
      ..add(EmptyOCS_Ocs.serializer)
      ..addBuilderFactory(const FullType(BuiltList, [FullType(JsonObject)]), ListBuilder<JsonObject>.new))
    .build();

/// Serializer for all values in this library.
///
/// Serializes values into the json. Json serialization is more expensive than the built_value wire format.
/// See: [$serializers] for serializing into the `built_value` wire format.
@_i2.visibleForTesting
final Serializers $jsonSerializers = _$jsonSerializers;
final Serializers _$jsonSerializers = (_$serializers.toBuilder()
      ..add(_i4.DynamiteDoubleSerializer())
      ..addPlugin(_i5.StandardJsonPlugin())
      ..addPlugin(const _i4.HeaderPlugin())
      ..addPlugin(const _i4.ContentStringPlugin()))
    .build();
// coverage:ignore-end
