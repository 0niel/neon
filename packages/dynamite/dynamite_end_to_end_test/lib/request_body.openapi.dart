// OpenAPI client generated by Dynamite. Do not manually edit this file.

// ignore_for_file: camel_case_extensions, camel_case_types, discarded_futures
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names, public_member_api_docs
// ignore_for_file: unreachable_switch_case, unused_element

/// request body test Version: 0.0.1.
library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert';
import 'dart:typed_data';

import 'package:built_value/serializer.dart';
import 'package:built_value/standard_json_plugin.dart' as _i4;
import 'package:dynamite_runtime/built_value.dart' as _i3;
import 'package:dynamite_runtime/http_client.dart' as _i1;
import 'package:meta/meta.dart' as _i2;

class $Client extends _i1.DynamiteClient {
  /// Creates a new `DynamiteClient` for untagged requests.
  $Client(
    super.baseURL, {
    super.baseHeaders,
    super.httpClient,
    super.cookieJar,
  });

  /// Creates a new [$Client] from another [client].
  $Client.fromClient(_i1.DynamiteClient client)
      : super(
          client.baseURL,
          baseHeaders: client.baseHeaders,
          httpClient: client.httpClient,
          cookieJar: client.cookieJar,
          authentications: client.authentications,
        );

  /// Builds a serializer to parse the response of `$$get_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $$get_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * default
  ///
  /// See:
  ///  * [$getRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> $get({Uint8List? uint8List}) async {
    final _rawResponse = await $getRaw(
      uint8List: uint8List,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * default
  ///
  /// See:
  ///  * [$get] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> $getRaw({Uint8List? uint8List}) async {
    final _headers = <String, String>{};
    Uint8List? _body;

    _headers['Content-Type'] = 'application/octet-stream';
    if (uint8List != null) {
      _body = uint8List;
    }
    const _path = '/';
    final _response = await executeRequest(
      'get',
      _path,
      headers: _headers,
      body: _body,
    );

    final _serializer = $$get_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }

  /// Builds a serializer to parse the response of `$$post_Request`.
  @_i2.experimental
  _i1.DynamiteSerializer<void, void> $$post_Serializer() => _i1.DynamiteSerializer(
        bodyType: null,
        headersType: null,
        serializers: _$jsonSerializers,
      );

  /// Returns a [Future] containing a `DynamiteResponse` with the status code, deserialized body and headers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * default
  ///
  /// See:
  ///  * [$postRaw] for an experimental operation that returns a `DynamiteRawResponse` that can be serialized.
  Future<_i1.DynamiteResponse<void, void>> $post({String? string}) async {
    final _rawResponse = await $postRaw(
      string: string,
    );

    return _i1.DynamiteResponse.fromRawResponse(_rawResponse);
  }

  /// This method and the response it returns is experimental. The API might change without a major version bump.
  ///
  /// Returns a [Future] containing a `DynamiteRawResponse` with the raw `HttpClientResponse` and serialization helpers.
  /// Throws a `DynamiteApiException` if the API call does not return an expected status code.
  ///
  /// Status codes:
  ///   * default
  ///
  /// See:
  ///  * [$post] for an operation that returns a `DynamiteResponse` with a stable API.
  @_i2.experimental
  Future<_i1.DynamiteRawResponse<void, void>> $postRaw({String? string}) async {
    final _headers = <String, String>{};
    Uint8List? _body;

    _headers['Content-Type'] = 'application/octet-stream';
    if (string != null) {
      _body = utf8.encode(string);
    }
    const _path = '/';
    final _response = await executeRequest(
      'post',
      _path,
      headers: _headers,
      body: _body,
    );

    final _serializer = $$post_Serializer();
    return _i1.ResponseConverter<void, void>(_serializer).convert(_response);
  }
}

// coverage:ignore-start
/// Serializer for all values in this library.
///
/// Serializes values into the `built_value` wire format.
/// See: [$jsonSerializers] for serializing into json.
@_i2.visibleForTesting
final Serializers $serializers = _$serializers;
final Serializers _$serializers = Serializers();

/// Serializer for all values in this library.
///
/// Serializes values into the json. Json serialization is more expensive than the built_value wire format.
/// See: [$serializers] for serializing into the `built_value` wire format.
@_i2.visibleForTesting
final Serializers $jsonSerializers = _$jsonSerializers;
final Serializers _$jsonSerializers = (_$serializers.toBuilder()
      ..add(_i3.DynamiteDoubleSerializer())
      ..addPlugin(_i4.StandardJsonPlugin())
      ..addPlugin(const _i3.HeaderPlugin())
      ..addPlugin(const _i3.ContentStringPlugin()))
    .build();
// coverage:ignore-end
